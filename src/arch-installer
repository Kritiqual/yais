#!/bin/sh


#Menu Variables---------------------------------------

declare -A VAR

#partition array
declare -A part_main

#Layout Variables---------------------------------------

#main
HIGHT=60
WIDTH=22

#Welcomebox
w_hight=10
w_width=45

#infobox
info_hight=45
info_width=10

#Networkbox
n_hight=20
n_width=10

#Inputbox
i_hight=8
i_width=45

function NETWORK ()
{
    if  ping -q -c 1 -W 2 archlinux.org &>/dev/null;
    then
            VAR[Network]="\Z4Connected"
    else
            VAR[Network]="\Z1*Error disconnected"
    fi
}

function RESET ()
{
VAR=(
    [Keyboard]="Set system keyboard"
    [Network]="Set up the network"
    [Hostname]="Set system hostname"
    [Locale]="set system locale"
    [Timezone]="set system time zone"
    [RootPassword]="set system root password"
    [rootpass_main]=0
    [root_part]=0
    [UserAccount]="set primary user name and password"
    [userpass_main]=0
    [usename_main]=arch
    [user_group]="wheel, audio, video"
    [Packages]="Configure Packages"
    [BootLoader]="set up bootloader"
    [Partition]="Partition disk(s)"
    [Filesystems]="Configure filesystems and mount points"
    [Install]="Start installation with saved settings"
    [Exit]="Exit installation"
    [total_var]=13
    [default_item]="Keyboard"
    [extra_packages]="base-devel"
    )
    NETWORK

}


function WELCOME ()
{
    dialog --colors --cr-wrap --clear --title "\ZbArch-installer" --ok-label " Start Installation " --msgbox "\n\ZbWelcome to the Arch Linux installation\n\n\Z4      /\             \ZnArch\Z4@\Znbtw\n\Z4     /  \            =========\n\Z4    /\   \      \n\Zn   /      \     \n  /   ,,   \    \n /   |  |  -\   \n/_-''    ''-_\  \n" 0 0
}

function KEYMAP ()
{
    KEY="$(dialog --clear --cancel-label "Back" --ok-label "Select" --title "Arch-installer" --stdout \
           --menu "Use UP and DOWN keys to nevigate menus. Use TAB to switch brtween buttons and ENTER to select" ${WIDTH} ${HIGHT} $(localectl list-keymaps | wc -l) \
           $(localectl list-keymaps | sed  -e ':a;N;$!ba;s/\n/ - /g' ) - )"

    [ -z ${KEY} ] || VAR[Keyboard]="${KEY}"
    [ -z ${KEY} ] || VAR[default_item]="Network"
}


function HOST_NAME ()
{
    HS=$(dialog --clear --no-cancel --stdout --title "Arch-installer" --clear --inputbox "Enter your hostname:" ${i_hight} ${i_width})
    [ -z ${HS} ] || VAR[Hostname]="${HS}"
    [ -z ${HS} ] || $VAR[default_item]="Locale"
}

function LOCALE ()
{
    LC="$(dialog --clear --cancel-label "Back" --ok-label "Select" --stdout --title "Arch-installer" \
    --menu "Use UP and DOWN keys to nevigate menus. Use TAB to switch brtween buttons and ENTER to select" ${WIDTH} ${HIGHT} 488 \
    $(cat /etc/locale.gen | tail -n 488 | cut -d ' ' -f1 | sed 's/#//g' | sed  -e ':a;N;$!ba;s/\n/ - /g') -)"
    [ -z ${LC} ] || VAR[Locale]="${LC}"
    [ -z ${LC} ] || VAR[default_item]="Timezone"
}

function TIMEZONE ()
{
    TZ_1="$(dialog --clear --stdout --ok-label "Select" --cancel-label "Back" --title "Arch-installer" \
    --menu "Use UP and DOWN keys to nevigate menus. Use TAB to switch brtween buttons and ENTER to select" ${WIDTH} ${HIGHT} 10 \
    Africa "" \
    America "" \
    Antarctica "" \
    Arctic "" \
    Asia "" \
    Atlantic "" \
    Australia "" \
    Europe "" \
    Indian "" \
    Pacific "" )"

    if [ -z ${TZ_1} ];
    then
        default_item="Timezone"
    else
        TZ_2="$(dialog --clear --stdout --ok-label "Select" --cancel-label "Back" --title "Arch-installer" \
        --menu "Use UP and DOWN keys to nevigate menus. Use TAB to switch brtween buttons and ENTER to select" ${WIDTH} ${HIGHT} $(timedatectl list-timezones | grep ${TZ_1} | wc -l) \
        $(timedatectl list-timezones | grep ${TZ_1} | cut -d '/' -f2 | sed  -e ':a;N;$!ba;s/\n/ - /g') - )"
        [ -z ${TZ_2} ] || VAR[Timezone]="${TZ_1}/${TZ_2}"
        [ -z ${TZ_2} ] || VAR[default_item]="RootPassword"
    fi
}

function ROOTPASSWORD ()
{
    while true
    do
        pass_1="$(dialog --clear --no-cancel --stdout --title "Arch-installer" --insecure --passwordbox "Enter password for root user:" ${i_hight} ${i_width} \
            --and-widget --clear --no-cancel --title "Arch-installer" --insecure --passwordbox "Retype your password:" ${i_hight} ${i_width} )"
        
        [ -z "$(echo ${pass_1} | cut -d ' ' -f1)" ] && dialog --clear --title "Arch-installer" --msgbox "Error, Retype your password" ${i_hight} ${i_width} && continue
        
        if [ "$(echo ${pass_1} | cut -d ' ' -f1)" == "$(echo ${pass_1} | cut -d ' ' -f2)" ];
        then
            VAR[rootpass_main]="$(echo ${pass_1} | cut -d ' ' -f1)"
            VAR[RootPassword]="********" 
            VAR[default_item]="UserAccount"
            break
        else
            dialog --clear --title "Arch-installer" --msgbox "Error, Retype your password" ${i_hight} ${i_width}
        fi
    done
}

function USER_GROUP ()
{
    pac="$(dialog --clear --stdout --ok-label "Select" --cancel-label "Use deafult" --checklist "Select:" ${WIDTH} ${HIGHT} 5 \
        "root" 1 off \
        "wheel" 2 on \
        "audio" 3 on \
        "video" 4 on \
        "network" 5 off )"

    if [ -z "${pac}" ];
    then 
        VAR[user_group]="wheel, audio, video"
    else
        VAR[user_group]="$( echo -e "${pac}" | sed 's/ /, /g')"
    fi
}

function USERPASSWORD ()
{
    while true
    do
        pass="$(dialog --clear --no-cancel --stdout --title "Arch-installer" --insecure --passwordbox "Enter password for ${1}:" ${i_hight} ${i_width} \
            --and-widget --clear --no-cancel --title "Arch-installer" --insecure --passwordbox "Retype your password:" ${i_hight} ${i_width} )"
        
        [ -z "$(echo ${pass} | cut -d ' ' -f1)" ] && dialog --clear --title "Arch-installer" --msgbox "Error, Retype your password" ${i_hight} ${i_width} && continue
        [ -z "$(echo ${pass} | cut -d ' ' -f2)" ] && dialog --clear --title "Arch-installer" --msgbox "Error, Retype your password" ${i_hight} ${i_width} && continue
        
        if [ "$(echo ${pass} | cut -d ' ' -f1)" == "$(echo ${pass} | cut -d ' ' -f2)" ];
        then
            VAR[userpass_main]="$(echo ${pass} | cut -d ' ' -f1)"
            USER_GROUP
            break
        else
            dialog --clear --title "Arch-installer" --msgbox "Error, Retype your password" ${i_hight} ${i_width}
        fi
    done
}

function USERACCOUNT ()
{
    while true
    do
        UR=$(dialog --clear --stdout --no-cancel --title "Arch-installer" --clear --inputbox "Enter your primary username:" ${i_hight} ${i_width})
        if [ -z ${UR} ];
        then
            dialog --clear --title "Arch-installer" --msgbox "Enter valid user name" ${i_hight} ${i_width}
            continue
        else

            VAR[usename_main]="${UR}"
            USERPASSWORD ${UR}
            break
        fi
    done
}

function PACKAGES ()
{
    pac="$(dialog --clear --stdout --ok-label "Select" --cancel-label "Back" --checklist "Select:" ${WIDTH} ${HIGHT} 15 \
  "base-devel" 1 o \
  "networkmanager" 2 on \
  "neofetch" 3 off \
  "neovim" 4 on \
  "vim" 5 off \
  "htop" 6 off \
  "ranger" 7 off \
  "efibootmgr" 8 on \
  "os-prober" 9 on \
  "mtools" 10 on \
  "acpi" 11 on \
  "wpa_supplicant" 12 on \
  "dosfstools" 13 on \
  "linux-headers" 14 on \
  "terminus-font" 15 on )"
    [ -z "${pac}" ] || VAR[extra_packages]="${pac}"
}

function BOOTLOADER ()
{
    BOOT="$(dialog --clear --no-cancel --ok-label "Select" --stdout --title "Arch Linux Installation menu" \
        --menu "Use UP and DOWN keys to nevigate menus. Use TAB to switch brtween buttons and ENTER to select" 0 ${HIGHT} 2 grub "grub bootloader" systemd-boot "systemd-boot UEFI boot manager")"
    [ -z ${BOOT} ] || VAR[BootLoader]="${BOOT}"    
}

function PARTITION ()
{
    ind="$(dialog --clear --stdout --title "Arch-installer" \
        --menu "Use UP and DOWN keys to nevigate menus. Use TAB to switch brtween buttons and ENTER to select" 0 ${HIGHT} 0 cfdisk "" fdisk "")"

    if [ -z ${ind} ];
    then
        VAR[default_item]="Partition"
    else
        ind_2="$(dialog --clear --stdout --title "Arch-installer" \
            --menu "Use UP and DOWN keys to nevigate menus. Use TAB to switch brtween buttons and ENTER to select" 0 ${HIGHT} 0 $(lsblk --paths --nodeps --noheadings --output=NAME,SIZE) )"
        
        [ -z ${ind_2} ] || VAR[default_item]="Filesystems"
        [ -z ${ind_2} ] && VAR[default_item]="Partition" || ${ind} ${ind_2}
    fi
}

function MOUNTPOINT ()
{
  
    mountpoint="$(dialog --clear --cancel-label "Back" --ok-label "Select" --stdout --title "Arch-installer" \
        --menu "Use UP and DOWN keys to nevigate menus. Use TAB to switch brtween buttons and ENTER to select" 0 ${HIGHT} 0 / "root" /boot/efi "boot-efi" /home "home" )"
    [ -z "${mountpoint}" ] && echo "empty" || echo "${mountpoint}"
}

function PTTYPE ()
{
    type="$(dialog --clear --cancel-label "Back" --ok-label "Select" --stdout --title "Arch-installer" \
        --menu "Use UP and DOWN keys to nevigate menus. Use TAB to switch brtween buttons and ENTER to select" 0 ${HIGHT} 0 ext4 "Linux ext4" vfat "FAT32" swap "Linux swap" )"
    if [ -z "${type}" ];
    then
        echo "empty"
    elif [ "${type}" == "swap" ];
    then
        echo "swap"
    else
        temp="$(MOUNTPOINT)"
        [ "${temp}" == "empty" ] && echo "empty" || echo "${type}:${temp}"
    fi
}

function FILESYSTEMS ()
{
    while true
    do
        part="$(dialog --clear --cancel-label "Done" --ok-label "Select" --stdout --title "Arch-installer" \
            --extra-button --extra-label "Reset" --menu "Use UP and DOWN keys to nevigate menus. Use TAB to switch brtween buttons and ENTER to select" 0 ${HIGHT} 0 $(lsblk --pairs --noheadings --paths --output=NAME,SIZE,FSTYPE,TYPE | awk -F '"' '/part/ {print $2 $3 $4 ":TYPE=" $6}') )"

        if [ "${?}" == "3" ];
        then
            dialog --clear --title "Arch-installer" --msgbox " Reset " 10 ${HIGHT}
            unset part_main[*]
        elif [ -z "${part}" ];
        then
            break
        else
            ptype="$(PTTYPE)"
            if [ "${ptype}" == "empty" ];
            then
                dialog --clear --title "Arch-installer" --msgbox "  ${part} will remain unchanged          " 10 ${HIGHT}
            elif [ "${ptype}" == "swap" ]
            then
                dialog --clear --title "Arch-installer" --msgbox "  ${part} will be used as swap" 10 ${HIGHT}
                part_main[${part}]="${ptype}:swap"
            else
                dialog --clear --title "Arch-installer" --msgbox "  ${part} will be formatted as $(echo ${ptype} | awk -F ":" '{print $1}') and mounted on the $(echo ${ptype} | awk -F ":" '{print $2}')         " 10 ${HIGHT}
                part_main[${part}]="${ptype}"
            fi
        fi
    done
}


function DEFAULT ()
{
    [ "$VAR[Keyboard]" == "Set system keyboard" ] && VAR[Keyboard]="us"
    [ "$VAR[Locale]" == "set system locale" ] && VAR[Locale]="en_US.UTF-8"
    [ "$VAR[Timezone]" == "set system time zone" ] && VAR[Timezone]="Asia/Kolkata"
}

function CHECK ()
{
    if [ "${VAR[Hostname]}" == "Set system hostname" ];
    then
        echo "Set system hostname first"
    elif [ "${VAR[RootPassword]}" == "set system root password" ];
    then
        echo "set system root password"
    elif [ "${Var[BootLoader]}" == "set up bootloader" ];
    then
        echo "set up bootloader"
    elif [ "${VAR[userpass_main]}" == "0" ];
    then
        echo "set primary user name and password"
    else
        echo "done"
    fi
}

function CHROOT_FILE ()
{
    echo "#!/bin/sh" > arch_chroot.sh
    echo "pacman -Syy --noconfirm"  >> arch_chroot.sh
    echo "loadkeys ${VAR[Keyboard]}"  >> arch_chroot.sh
    echo "ln -sf /usr/share/zoneinfo/${VAR[Timezone]} /etc/localtime"  >> arch_chroot.sh
    echo "hwclock --systohc"  >> arch_chroot.sh
    echo "echo \"$(cat /etc/locale.gen | grep \#${VAR[Locale]} | sed 's/#//' )\" >> /etc/locale.gen"  >> arch_chroot.sh
    echo "locale-gen"  >> arch_chroot.sh
    echo "echo \"LANG=${VAR[Locale]}\" > /etc/locale.conf"  >> arch_chroot.sh
    echo "echo \"KEYMAP=${VAR[Keyboard]}\" > /etc/vconsole.conf"  >> arch_chroot.sh
    echo "echo \"${VAR[Hostname]}\" > /etc/hostname"  >> arch_chroot.sh
    echo "echo \"127.0.0.1       localhost\" >> /etc/hosts"  >> arch_chroot.sh
    echo "echo \"::1             localhost\" >> /etc/hosts"  >> arch_chroot.sh
    echo "echo \"127.0.1.1       ${VAR[Hostname]}.localdomain ${VAR[Hostname]}\" >> /etc/hosts"  >> arch_chroot.sh
    echo "pacman -S ${VAR[extra_packages]} sudo --noconfirm"  >> arch_chroot.sh
    echo "systemctl enable NetworkManager"  >> arch_chroot.sh
    echo "systemctl enable wpa_supplicant"  >> arch_chroot.sh
    echo "echo root:\"${VAR[rootpass_main]}\" | chpasswd"  >> arch_chroot.sh
    echo "useradd -G ${VAR[user_group]} -m \"${VAR[usename_main]}\""  >> arch_chroot.sh
    echo "echo ${VAR[usename_main]}:\"${VAR[userpass_main]}\" | chpasswd"  >> arch_chroot.sh
    echo "echo \"${VAR[usename_main]} ALL=(ALL) ALL\" >> /etc/sudoers.d/${VAR[usename_main]}"  >> arch_chroot.sh
    if [ "${VAR[BootLoader]}" == "grub" ];
    then
        echo "pacman -S grub efibootmgr os-prober grub-customizer --noconfirm"  >> arch_chroot.sh
        echo "grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ARCH"  >> arch_chroot.sh
        echo "grub-mkconfig -o /boot/grub/grub.cfg"  >> arch_chroot.sh
    elif [ "${VAR[BootLoader]}" == "systemd-boot" ];
    then
        echo "bootctl --path=/boot/efi install"  >> arch_chroot.sh
        echo "echo \"timeout 5\" > /boot/loader/loader.conf"  >> arch_chroot.sh
        echo "echo \"default arch-*\" >> /boot/loader/loader.conf"  >> arch_chroot.sh
        echo "echo \"title      Arch Linux\" > /boot/loader/entries/arch.conf"  >> arch_chroot.sh
        echo "echo \"linux      /vmlinuz-linux\" >> /boot/loader/entries/arch.conf"  >> arch_chroot.sh
        echo "echo \"initrd     /initramfs-linux.img\" >> /boot/loader/entries/arch.conf"  >> arch_chroot.sh
        echo "echo \"options    root=${VAR[root_part]} rw\" >> /boot/loader/entries/arch.conf"  >> arch_chroot.sh
    fi
    mv arch_chroot.sh /mnt/
    chmod +x /mnt/arch_chroot.sh
    arch-chroot /mnt ./arch_chroot.sh
    exit
}

function BASE_PACSTRAP ()
{
    pacstrap /mnt base linux linux-firmware
    genfstab -U /mnt >> /mnt/etc/fstab
    CHROOT_FILE
}

function FORMAT_AND_MOUNT_PARTITION ()
{
    umount -R /mnt
    #rm -rf /mnt/*
#######################################
   for i in ${!part_main[*]}
      do
           if [ "$( echo "${part_main[$i]}" | cut -d ':' -f2 )" == "/" ];
           then
                if [ "$( echo "${part_main[$i]}" | cut -d ':' -f1 )" == "ext4" ]
                    then
                        mkfs.ext4 -F ${i}
                        mount ${i} /mnt
                        VAR[root_part]="${i}"
                    fi
           fi
       done
######################################
   for i in ${!part_main[*]}
      do
           if [ "$( echo "${part_main[$i]}" | cut -d ':' -f2 )" == "/boot/efi" ];
           then
                mkdir -p /mnt/boot/efi
                mkfs.fat -F32 ${i}
                mount ${i} /mnt/boot/efi
           fi
       done
######################################
   for i in ${!part_main[*]}
      do
           if [ "$( echo "${part_main[$i]}" | cut -d ':' -f2 )" == "/home" ];
           then
                if [ "$( echo "${part_main[$i]}" | cut -d ':' -f1 )" == "ext4" ]
                then
                    mkfs.ext4 -F ${i}
                    mkdir /mnt/home
                    mount ${i} /mnt/home
                fi
           fi
    done

   for i in ${!part_main[*]}
      do
           if [ "$( echo "${part_main[$i]}" | cut -d ':' -f1 )" == "swap" ];
           then
               mkswap ${i}
               swapon ${i}
           fi
    done
    BASE_PACSTRAP
}

function INSTALLATION ()
{
    check="$(CHECK)"
    if [ "${check}" == "done" ]
    then
        DEFAULT
        FORMAT_AND_MOUNT_PARTITION
    else
        dialog --clear --title "Arch-installer" --msgbox "${check}" ${i_hight} ${i_width}
    fi

}

function MAIN () 
{
    dialog --cursor-off-label --colors --cr-wrap --erase-on-exit --clear --stdout --title "\ZbArch Linux Installation menu" --help-button --hline "\Zbhuehuehue" \
    --ok-label "Enter" --cancel-label "Settings" --help-label "Reset" --default-item ${VAR[default_item]} --menu "\Z4            ==============================\Zn\n        Use UP and DOWN keys to nevigate menus.\n Use TAB to switch brtween buttons and ENTER to select" ${WIDTH} ${HIGHT} ${VAR[total_var]} \
    Keyboard "${VAR[Keyboard]}" \
    Network "${VAR[Network]}" \
    Hostname "${VAR[Hostname]}" \
    Locale "${VAR[Locale]}" \
    Timezone "${VAR[Timezone]}" \
    RootPassword "${VAR[RootPassword]}" \
    UserAccount "${VAR[UserAccount]}" \
    Packages "${VAR[Packages]}" \
    BootLoader "${VAR[BootLoader]}" \
    Partition "${VAR[Partition]}" \
    Filesystems "${VAR[Filesystems]}" \
    Install "${VAR[Install]}" \
    Exit "${VAR[Exit]}"
}

RESET

NETWORK

WELCOME

while true
do
    main=$(MAIN)
    
    if [ ${main} == "Keyboard" ];
    then
        KEYMAP
   elif [ ${main} == "Network" ];
   then
       VAR[default_item]="Hostname"
   elif [ ${main} == "Hostname" ];
   then
       HOST_NAME
   elif [ ${main} == "Locale" ];
   then
       LOCALE
   elif [ ${main} == "Timezone" ];
   then
       TIMEZONE
   elif [ ${main} == "RootPassword" ];
   then
       ROOTPASSWORD
   elif [ ${main} == "UserAccount" ];
   then
       USERACCOUNT
       VAR[default_item]="Packages"
   elif [ ${main} == "Packages" ];
   then
       PACKAGES
       VAR[default_item]="BootLoader"
   elif [ ${main} == "BootLoader" ];
   then
       BOOTLOADER
       VAR[default_item]="Partition"
   elif [ ${main} == "Partition" ];
   then
       PARTITION
   elif [ ${main} == "Filesystems" ];
   then
       FILESYSTEMS
       VAR[default_item]="Install"
   elif [ ${main} == "Install" ];
   then
       INSTALLATION
    elif [ ${main} == "Exit" ];
    then
        dialog --title "Arch-installer" --default-button "no" --no-label "I don't" --yes-label "I do" \
            --yesno "Are you sure you want to abort the installation." ${i_hight} ${i_width}
        
        [ "${?}" == "1" ] || break
        
    elif [ -z "${main}" ];
    then
        SHOW_SETTINGS
    elif [ $(echo $main | cut -d ' ' -f1) == "HELP" ];
    then
        dialog --title "Arch-installer" --default-button "no" --no-label "I don't" --yes-label "I do" \
        --yesno "Do You Want to reset settings" ${i_hight} ${i_width}
        [ "${?}" == "1" ] || RESET
    fi

done

#cho -en "\\n\\n\\n"

#cho "keymap  =  ${VAR[Keyboard]}"
#cho "Hostname  =  ${VAR[Hostname]}"
#cho "Locale  =  ${VAR[Locale]}"
#cho "Timezone  =  ${VAR[Timezone]}"
#cho "rootpass_main  =  ${VAR[rootpass_main]}"
#cho "usename_main  =  ${VAR[usename_main]}"
#cho "userpass_main  =  ${VAR[userpass_main]}"
#cho "user_group  =  ${VAR[user_group]}"
#cho "BootLoader  =  ${VAR[BootLoader]}"
#cho "packages  =  ${VAR[extra_packages]}"
#cho "number of partition  =  ${#part_main[*]}"
